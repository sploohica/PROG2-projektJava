import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class krizci_krozci extends JPanel {
    char playerMark = 'x'; // x gre prvi
    JButton[] buttons = new JButton[9];

    public krizci_krozci() {
        setLayout(new GridLayout(3, 3));
        initializeButtons();
    }

    // ustvarimo 9 gumbov
    // ustvarimo text, dodamo metodo action listener, da zabeleži dejavnost
    // dodamo na zaslon

    public void initializeButtons() {
        for (int i = 0; i <= 8; i++) {
            buttons[i] = new JButton();
            buttons[i].setText(' ');
            buttons[i].setBacground(Color.white);
            buttons[i].addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    Jbutton buttonClicked = (JButton) e.getSource();
                    buttonClicked.setText(String.valueOf(playerMark));

                    if (playerMark == 'x') {
                        playerMark = 'o';
                        buttonClicked.setBackground(Color.RED);

                    } else {
                        playerMark = 'x';
                        buttonClicked.setBackground(Color.ORANGE);

                    }
                    displayVictor();

                }
            });
            add(buttons[i]); // doda gumbe na zaslon (JPanel)
        }
    }

    // prikažemo zmagovalca

    public void displayVictor() {

        if (checkForWinner() == true) {
            // obrnemo znake igralcev
            // ko damo x in zmagamo, ga sprmeni v o
            // ampak x je zmagovalec
            if (playerMark == 'x')
                playerMark = 'o';
            else
                playerMark = 'x';

            JOptionPane pane = new JOptionPane();
            int dialogResult = JOptionPane.showConfirmDialog(pane,
                    "Konec igre. " + playerMark + " je zmagovalec! Bi rada ponovila igro?",
                    JOptionPane.YES_NO_OPTION);

            if (dialogResult == JOptionPane.YES_OPTION)
                resetTheButtons();
            else
                System.exit(0);
        }

        else if (checkDraw()) {
            JOptionPane pane = new JOptionPane();
            int dialogResult = JOptionPane.showConfirmDialog(pane, "Izenačeno? Ponovna igra?",
                    JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION)
                resetTheButtons();
            else
                System.exit(0);

        }
    }

    // metoda za resetiranje gumbov
    // ponovna igra

    private void resetTheButtons() {
        playerMark = 'x';
        for (int i = 0; i < 9; i++) {

            buttons[i].setText('-');
            buttonsf[i].setBackground(Color.white);
        }
    }

    // preveri ali je izenačeno

    public boolean checkDraw() {
        boolean full = true;
        for (int i = 0; i < 9; i++) { // preverimo ali so vsi kvadratki poklikani
            if (buttons[i].getText().charAT(0) == ' ') {

            }
        }
        return full;
    }

    // preveri kdo je zmagovalec
    public boolean checkForWinner() {
        if (checkRows() == true || checkColumns() == true || checkDiagonals() == true)
            return true;
        else
            return false;
    }

    // preveri stolpce za zmago
    public boolean checkRows() {
        int i = 0;
        for (int j = 0; j < 3; j++) {
            if (buttons[i].getText().equals(buttons[i + 1].getText())
                    && buttons[i].getText().equals(buttons[i + 2].getText())
                    && buttons[i].getText().chart(0) != ' ') {
                return true;
            }
            i = i + 3;

        }
        return false;
    }

    // preveri vrstice za zmago
    public boolean checkColumns() {

        int i = 0;
        for (int j = 0; j < 3; j++) {
            if (buttons[i].getText().equals(buttons[i + 3].getText())
                    && buttons[i].getText().equals(buttons[i + 6].getText())
                    && buttons[i].getText().charAT(0) != ' ') {
                return true;
            }
            i++;
        }
        return false;
    }

    // preveri diagonale za zmago
    public boolean checkDiagonals() {
        if (buttons[0].getText().equals(buttons[4].getText()) && buttons[0].getText().equals(buttons[8].getText())
                && buttons[0].getText().charAT(0) != ' ')
            return true;
        else if (buttons[2].getText().equals(buttons[4].getText()) && buttons[2].getText().equals(buttons[6].getText())
                && buttons[2].getText().charAT(0) != ' ')
            return true;

        else
            return false;
    }

    // oblika okna igre
    public static void main(String[] args) {
        JFrame window = new JFrame("Igra: Krizci in krozci ; Projekt v programu Java");
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // x da zapremo okno
        window.getContentPane().add(new krizci_krozci()); // dodamo vse podatke oknu
        window.setBounds(600, 600, 600, 600); // mere okna
        window.setVisible(true); // pokaži okno
        window.setLocationRelativeTo(null); // okno pokažemo na sredini zaslona)
    }
}
